#!/usr/bin/env python3

import sys
import os
import csv
import json

def format_duration(seconds):
    """Convert seconds to human-readable format (HH:MM:SS.mmm)."""
    hours = int(seconds // 3600)
    minutes = int((seconds % 3600) // 60)
    secs = seconds % 60
    return f"{hours:02d}:{minutes:02d}:{secs:06.3f}"

def main():
    if len(sys.argv) != 2:
        print("Usage: compute-speaking-time <basename>")
        print("Example: compute-speaking-time sample")
        sys.exit(1)

    basename = sys.argv[1]

    # Construct file paths
    timeline_file = os.path.join("output", basename, f"{basename}_timeline.csv")
    metadata_file = os.path.join("output", basename, "metadata.json")

    # Check if timeline file exists
    if not os.path.exists(timeline_file):
        print(f"Error: Timeline file not found: {timeline_file}")
        sys.exit(1)

    # Load speaker language metadata
    speaker_languages = {}
    if not os.path.exists(metadata_file):
        print(f"Error: Metadata file not found: {metadata_file}")
        sys.exit(1)
    
    try:
        with open(metadata_file, 'r') as f:
            metadata = json.load(f)
            for speaker_id, data in metadata.items():
                speaker_languages[speaker_id] = data['language']
    except (json.JSONDecodeError, KeyError) as e:
        print(f"Error: Malformed metadata file: {metadata_file}")
        sys.exit(1)

    # Read timeline CSV and calculate speaking time per speaker
    speaker_times = {}
    total_segments = 0

    with open(timeline_file, 'r') as csvfile:
        reader = csv.DictReader(csvfile)
        for row in reader:
            speaker_id = row['SPEAKER_ID']
            start_time = float(row['start_time'])
            end_time = float(row['end_time'])
            duration = end_time - start_time

            if speaker_id not in speaker_times:
                speaker_times[speaker_id] = {'total_time': 0.0, 'segment_count': 0}

            speaker_times[speaker_id]['total_time'] += duration
            speaker_times[speaker_id]['segment_count'] += 1
            total_segments += 1

    # Calculate total speaking time across all speakers
    total_time = sum(data['total_time'] for data in speaker_times.values())

    # Sort speakers by total speaking time (descending)
    sorted_speakers = sorted(speaker_times.items(), key=lambda x: x[1]['total_time'], reverse=True)

    # Display results
    print(f"Speaking time analysis for: {basename}")
    print("=" * 50)
    
    for speaker_id, data in sorted_speakers:
        percentage = (data['total_time'] / total_time * 100) if total_time > 0 else 0
        language = speaker_languages.get(speaker_id, 'unknown')
        print(f"{speaker_id}: {format_duration(data['total_time'])} ({percentage:.1f}%) - {data['segment_count']} segments [{language}]")

    print("-" * 50)
    print(f"Total time: {format_duration(total_time)}")
    print(f"Total segments: {total_segments}")

if __name__ == "__main__":
    main()